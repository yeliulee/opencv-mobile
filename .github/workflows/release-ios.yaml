name: release
on: [push]

env:
  DEVELOPER_DIR: /Applications/Xcode_13.4.1.app/Contents/Developer
  IOS_DEPLOYMENT_TARGET: "9.0"
  MAC_DEPLOYMENT_TARGET: "10.9"
  MAC_ARM64_DEPLOYMENT_TARGET: "11.0"
  MAC_CATALYST_DEPLOYMENT_TARGET: "13.1"
  ENABLE_BITCODE: OFF
  ENABLE_ARC: OFF
  ENABLE_VISIBILITY: OFF
  EMSCRIPTEN_VERSION: 3.1.28

permissions:
  contents: read

jobs:
  ios-opencv4:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-ios
    steps:
      - uses: actions/checkout@v3
      - name: opencv-source
        run: |
          wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
          unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
          cd opencv-${{ env.OPENCV_VERSION }}
          echo -n > cmake/OpenCVFindLibsGrfmt.cmake
          rm -rf modules/gapi
          patch -p1 -i ../opencv-4.8.1-no-rtti.patch
          patch -p1 -i ../opencv-4.8.1-no-zlib.patch
          patch -p1 -i ../opencv-4.8.1-link-openmp.patch
          rm -rf modules/highgui
          cp -r ../highgui modules/
      - name: build-armv7
        run: |
          cd opencv-${{ env.OPENCV_VERSION }}
          mkdir build-armv7 && cd build-armv7
          cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7" \
              -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
              -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
              -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
          cmake --build . -j 3
          cmake --build . --target install
      - name: build-arm64
        run: |
          cd opencv-${{ env.OPENCV_VERSION }}
          mkdir build-arm64 && cd build-arm64
          cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64" \
              -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
              -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
              -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
          cmake --build . -j 3
          cmake --build . --target install
      - name: build-arm64e
        run: |
          cd opencv-${{ env.OPENCV_VERSION }}
          mkdir build-arm64e && cd build-arm64e
          cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64e" \
              -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
              -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
              -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
          cmake --build . -j 3
          cmake --build . --target install
      - name: package
        run: |
          rm -rf opencv2.framework
          mkdir -p opencv2.framework/Versions/A/Headers
          mkdir -p opencv2.framework/Versions/A/Resources
          ln -s A opencv2.framework/Versions/Current
          ln -s Versions/Current/Headers opencv2.framework/Headers
          ln -s Versions/Current/Resources opencv2.framework/Resources
          ln -s Versions/Current/opencv2 opencv2.framework/opencv2
          lipo -create \
              opencv-${{ env.OPENCV_VERSION }}/build-armv7/install/lib/libopencv_world.a \
              opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
              opencv-${{ env.OPENCV_VERSION }}/build-arm64e/install/lib/libopencv_world.a \
              -o opencv2.framework/Versions/A/opencv2
          cp -r opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
          sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
          rm -f ${{ env.PACKAGENAME }}.zip
          zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
      - name: test
        run: |
          cd test
          mkdir build && cd build
          cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7;arm64;arm64e" \
              -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
              -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
              -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
          cmake --build . -j 3
      - name: upload-zip
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip
